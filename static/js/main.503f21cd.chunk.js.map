{"version":3,"sources":["app/components/my-component.jsx","app/directives/inject-directives.jsx","app/directives/highlight.directive.jsx","app/directives/alert-time-onclick.directive.jsx","App.js","serviceWorker.js","index.js"],"names":["InjectDirectives","ReactDirectives","highlight","WrappedComponent","color","props","ref","setTimeout","ReactDOM","findDOMNode","current","style","backgroundColor","react_default","a","createElement","Object","assign","alertTimeOnClick","_React$Component","AlertTimeOnClick","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","React","createRef","inherits","createClass","key","value","addEventListener","alert","Date","Component","App","state","componentColor","toggleComponentColor","setState","className","my_component","onClick","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAQeA,ECJAC,YAAgB,CAC7BC,UCFa,SAACC,GAAD,OAAsB,SAACC,GAAD,OACnC,SAAmBC,EAAOC,GAKxB,OAJAC,WAAW,WACIC,IAASC,YAAYH,EAAII,SACjCC,MAAMC,gBAAkBR,IAExBS,EAAAC,EAAAC,cAACZ,EAADa,OAAAC,OAAA,GAAsBZ,EAAtB,CAA6BC,IAAKA,QDH3CY,iBEHa,SAACf,GAAD,OAAsB,2BAAAgB,GAEjC,SAAAC,EAAYf,GAAO,IAAAgB,EAAA,OAAAL,OAAAM,EAAA,EAAAN,CAAAO,KAAAH,IACjBC,EAAAL,OAAAQ,EAAA,EAAAR,CAAAO,KAAAP,OAAAS,EAAA,EAAAT,CAAAI,GAAAM,KAAAH,KAAMlB,KACDC,IAAMqB,IAAMC,YAFAP,EAFc,OAAAL,OAAAa,EAAA,EAAAb,CAAAI,EAAAD,GAAAH,OAAAc,EAAA,EAAAd,CAAAI,EAAA,EAAAW,IAAA,oBAAAC,MAAA,WAQlBxB,IAASC,YAAYc,KAAKjB,IAAII,SACtCuB,iBAAiB,QAAS,WAC7BC,MAAM,IAAIC,UAVmB,CAAAJ,IAAA,SAAAC,MAAA,WActB,OAAOnB,EAAAC,EAAAC,cAACZ,EAADa,OAAAC,OAAA,GAAsBM,KAAKlB,MAA3B,CAAkCC,IAAKiB,KAAKjB,WAd7Bc,EAAA,CACJO,IAAMS,cHIxBpC,kLAHX,OAAOa,EAAAC,EAAAC,cAAA,MAASQ,KAAKlB,cAFCsB,IAAMS,YIsBjBC,6MApBbC,MAAQ,CACNC,eAAgB,SAGlBC,qBAAuB,WACrBnB,EAAKoB,SAAS,CAAEF,eAA8C,QAA9BlB,EAAKiB,MAAMC,eAA2B,OAAS,iFAI/E,OACE1B,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,OACb7B,EAAAC,EAAAC,cAAC4B,EAAD,CACEzC,UAAWqB,KAAKe,MAAMC,eACtBrB,kBAAgB,EAChB0B,QAASrB,KAAKiB,+BAfNJ,aCQES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNzC,IAAS0C,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.503f21cd.chunk.js","sourcesContent":["import React from 'react';\nimport InjectDirectives from '../directives/inject-directives';\n\nclass MyComponent extends React.Component {\n  render() {\n    return <div {...this.props} />;\n  }\n}\nexport default InjectDirectives(MyComponent);\n","import ReactDirectives from 'react-attribute-directives';\nimport highlight from './highlight.directive';\nimport alertTimeOnClick from './alert-time-onclick.directive';\n\nexport default ReactDirectives({\n  highlight,\n  alertTimeOnClick\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nexport default (WrappedComponent) => (color) =>\n  function Highlight(props, ref) {\n    setTimeout(() => {\n      const node = ReactDOM.findDOMNode(ref.current);\n      node.style.backgroundColor = color;\n    });\n    return <WrappedComponent {...props} ref={ref} />;\n  }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nexport default (WrappedComponent) => () =>\n  class AlertTimeOnClick extends React.Component {\n    constructor(props) {\n      super(props);\n      this.ref = React.createRef();\n    }\n\n    componentDidMount() {\n      const node = ReactDOM.findDOMNode(this.ref.current);\n      node.addEventListener('click', () => {\n        alert(new Date());\n      });\n    }\n\n    render() { return <WrappedComponent {...this.props} ref={this.ref} />; }\n  }","import React, { Component } from 'react';\nimport './App.css';\nimport MyComponent from './app/components/my-component';\n\nclass App extends Component {\n  state = {\n    componentColor: 'red'\n  }\n\n  toggleComponentColor = () => {\n    this.setState({ componentColor: this.state.componentColor === 'red' ? 'blue' : 'red' });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <MyComponent\n          highlight={this.state.componentColor}\n          alertTimeOnClick\n          onClick={this.toggleComponentColor}\n        />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}